# Creat by FS :
# https://github.com/fsaimon/aria2.conf/blob/master/aria2.conf


## 下载设置 ##

# 断点续传
continue=true
# 最大同时下载任务数, 运行时可修改, 默认: 5
max-concurrent-downloads=32
# 单个任务最大线程数, 添加时可指定, 默认: 5
split=16
# 最小文件分片大小, 添加时可指定, 取值范围 1M-1024M, 默认: 20M
# 假定 size=10M, 文件为 20MiB 则使用两个来源下载; 文件为 15MiB 则使用一个来源下载
min-split-size=1M
# 同一服务器连接数, 添加时可指定, 默认: 1
max-connection-per-server=16
# 断开速度过慢的连接
lowest-speed-limit=0
# 整体下载速度限制, 运行时可修改, 默认: 0
#max-overall-download-limit=0
# 单个任务下载速度限制, 默认: 0
#max-download-limit=0
# 整体上传速度限制, 运行时可修改, 默认: 0
#max-overall-upload-limit=0
# 单个任务上传速度限制, 默认: 0
#max-upload-limit=0
# 禁用 IPv6, 默认: false
disable-ipv6=true
# 当服务器返回 503 错误时, aria2 会尝试重连
# 尝试重连次数, 0 代表无限, 默认: 5
max-tries=3
# 重连冷却, 默认: 0
#retry-wait=0


## 进度保存相关 ##

# 从会话文件中读取下载任务
# 开启该参数后 aria2 将只接受 session 中的任务, 这意味着 aria2 一旦使用 conf 后将不再接受来自终端的任务, 所以该条只需要在启动 rpc 时加上就可以了
input-file=${HOME}/Downloads/..aria2/session
# 在 aria2 退出时保存`错误/未完成`的下载任务到会话文件
save-session=${HOME}/Downloads/..aria2/session
# 定时保存会话, 0 为退出时才保存, 需 1.16.1 以上版本, 默认: 0
save-session-interval=60
# 强制保存会话, 即使任务已经完成, 默认: false
# 较新的版本开启后会在任务完成后依然保留 .aria2 文件
force-save=false


## RPC 相关设置 ##

# 启用 RPC, 默认: false
enable-rpc=true
# 允许所有来源, 默认: false
rpc-allow-origin-all=true
# 允许非外部访问, 默认: false
rpc-listen-all=true
# 事件轮询方式, 取值: [epoll, kqueue, port, poll, select], 不同系统默认值不同
event-poll=epoll
# RPC 监听端口, 端口被占用时可以修改, 默认: 6800
rpc-listen-port=6800
# 设置 RPC 授权令牌, v1.18.4 新增功能, 取代 --rpc-user 和 --rpc-passwd 选项
#rpc-secret=<TOKEN>
# 设置 RPC 访问用户名, 此选项新版已废弃, 建议改用 --rpc-secret 选项
#rpc-user=<USER>
# 设置 RPC 访问密码, 此选项新版已废弃, 建议改用 --rpc-secret 选项
#rpc-passwd=<PASSWD>


## BT/PT 下载相关 ##

# 当下载的是一个种子(以 .torrent 结尾)时, 自动开始 BT 任务, 默认: true
follow-torrent=true
# BT 监听端口, 当端口被屏蔽时使用, 默认: 6881-6999
#listen-port=51413
# 单个种子最大连接数, 默认: 55
#bt-max-peers=55
# 打开 DHT 功能, PT 需要禁用, 默认: true
#enable-dht=false
# 打开 IPv6 DHT 功能, PT 需要禁用, 默认: true
#enable-dht6=false
# DHT 网络监听端口, 默认: 6881-6999
#dht-listen-port=6881-6999
# 本地节点查找, PT 需要禁用, 默认: false
bt-enable-lpd=true
# 种子交换, PT 需要禁用, 默认: true
#enable-peer-exchange=true
# 每个种子限速, 对少种的 PT 很有用, 默认: 50K
#bt-request-peer-speed-limit=50K
# 客户端伪装, PT 需要
#peer-id-prefix=-TR2770-
#user-agent=Transmission/2.77
# 当种子的分享率达到设定值时, 自动停止做种, 0 为一直做种, 默认: 1.0
#seed-ratio=0
# BT 校验相关, 默认: true
bt-hash-check-seed=true
# 继续之前的 BT 任务时, 无需再次校验, 默认: false
bt-seed-unverified=false
# 保存磁力链接元数据为种子文件( .torrent 文件), 默认: false
bt-save-metadata=true
# 强制加密, 防迅雷必备
bt-require-crypto=true


## 磁盘相关 ##

#文件保存路径, 默认为当前启动位置
dir=${HOME}/Downloads
#另一种 Linux 文件缓存方式, 使用前确保您使用的内核支持此选项, 需要 1.15 及以上版本(?)
enable-mmap=true
# 文件预分配方式, 能有效降低磁盘碎片, 默认: prealloc
# 预分配所需时间: 快 none < trunc < falloc < prealloc 慢
# falloc 仅仅比 trunc 慢 0.06s
# 磁盘碎片: 无 falloc = prealloc < trunc = none 有
# 推荐优先级: 高 falloc --> prealloc --> trunc -->none 低
# ext4, Btrfs, XFS, NTFS 等新型文件系统建议使用 falloc, falloc (fallocate) 在这些文件系统上可以瞬间创建完整的空文件
# trunc (ftruncate) 同样是是瞬间创建文件, 但是与 falloc 的区别是创建出的空文件不占用实际磁盘空间
# prealloc 传统的创建完整的空文件, aria2 会一直等待直到分配结束, 也就是说如果是在 HHD 上/下载 10G 文件，那么你的 aria2 将会一直等待你的硬盘持续满载工作直到 10G 文件创建完成后才会开始下载
# none 将不会预分配, 磁盘碎片程度受下面的 disk-cache 影响, trunc 也是同样的
# 请勿在传统文件系统如: ext3, VFAT 上使用 falloc, 它的实际效果将与 prealloc 相同
# MacOS 上建议使用 prealloc, 因为它不支持 falloc, 也不支持 trunc, 但是可以尝试用 brew 安装 truncate 以支持 trunc (ftruncate)
# 事实上作者也有些不能理解 trunc 在 aria2 中的角色, 因为它与 none 几乎没有区别, 换句话说: 太鸡肋了
file-allocation=falloc
# 启用磁盘缓存, 0 为禁用缓存, 需 1.16 以上版本, 默认: 16M
disk-cache=64M
